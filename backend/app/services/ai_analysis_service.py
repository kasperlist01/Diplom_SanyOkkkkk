# backend/app/services/ai_analysis_service.py
import json
import logging
import asyncio
from typing import Dict, Any, Generator, Optional
import anthropic
import os

from app.core.config import settings
from app.schemas.company import CompanyDetail, FinancialReport

logger = logging.getLogger(__name__)


class AIAnalysisService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–π"""

    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á Anthropic –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.api_key = os.getenv('ANTHROPIC_API_KEY') or settings.anthropic_api_key
        self.api_url = os.getenv('ANTHROPIC_API_URL') or settings.anthropic_api_url

        if not self.api_key:
            raise ValueError("Anthropic API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ANTHROPIC_API_KEY")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Anthropic
        self.claude_client = anthropic.Anthropic(api_key=self.api_key, base_url=self.api_url)

        logger.info(f"AIAnalysisService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Anthropic API –∫–ª—é—á–æ–º: {self.api_key[:10]}...")

    def analyze_company_stream(
            self,
            company: CompanyDetail,
            reports: list[FinancialReport],
            similar_companies: list = None
    ) -> Generator[str, None, None]:
        """
        –ü–æ—Ç–æ–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò Claude
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_data = self._prepare_analysis_data(company, reports, similar_companies)

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = self._create_analysis_prompt(analysis_data)

            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ {company.name} (–ò–ù–ù: {company.inn})")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_claude_stream():
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º Claude
                    with self.claude_client.messages.stream(
                            model="claude-sonnet-4-20250514",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
                            max_tokens=4000,
                            temperature=0.7,
                            messages=[
                                {
                                    "role": "user",
                                    "content": prompt
                                }
                            ]
                    ) as stream:
                        for text in stream.text_stream:
                            if text:
                                yield text
                except anthropic.APIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ Anthropic API: {e}")
                    yield f"**–û—à–∏–±–∫–∞ API:** {str(e)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    yield f"**–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:** {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞
            for chunk in run_claude_stream():
                yield chunk

        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {e}")
            yield f"**–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** {str(e)}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {e}")
            yield f"**–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:** {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    def _prepare_analysis_data(
            self,
            company: CompanyDetail,
            reports: list[FinancialReport],
            similar_companies: list = None
    ) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""

        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
        company_info = {
            "name": company.name,
            "full_name": company.full_name,
            "inn": company.inn,
            "ogrn": company.ogrn,
            "okved": company.okved,
            "okved_description": company.okved_o,
            "registration_date": company.registration_date,
            "address": company.address,
            "charter_capital": company.charter_capital,
            "status": company.status,
            "opf": company.opf
        }

        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        financial_data = []
        for report in reports[-5:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
            financial_data.append({
                "year": report.year,
                "revenue": report.revenue_cur,
                "gross_profit": report.gross_profit_cur,
                "operating_profit": report.oper_profit_cur,
                "net_profit": report.net_profit_cur,
                "assets": report.balance_assets_eoy,
                "equity": report.equity_eoy
            })

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö
        ownership_info = None
        if company.owners:
            ownership_info = {
                "individual_owners": len(company.owners.get('fl', [])),
                "legal_owners": len(company.owners.get('ul', [])),
                "ownership_structure": company.owners
            }

        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
        competitors_info = None
        if similar_companies:
            competitors_info = {
                "count": len(similar_companies),
                "companies": [{"name": comp.name, "inn": comp.inn} for comp in similar_companies[:5]]
            }

        return {
            "company_info": company_info,
            "financial_data": financial_data,
            "ownership_info": ownership_info,
            "competitors_info": competitors_info
        }

    def _create_analysis_prompt(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞"""

        company_info = data["company_info"]
        financial_data = data["financial_data"]

        prompt = f"""
–ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

## –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ü–ê–ù–ò–ò
- **–ù–∞–∑–≤–∞–Ω–∏–µ:** {company_info['name']}
- **–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** {company_info['full_name']}
- **–ò–ù–ù:** {company_info['inn']}
- **–û–ì–†–ù:** {company_info['ogrn']}
- **–û–ö–í–≠–î:** {company_info['okved']} ({company_info['okved_description']})
- **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {company_info['registration_date']}
- **–£—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª:** {company_info['charter_capital']}
- **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞:** {company_info['opf']}
- **–ê–¥—Ä–µ—Å:** {company_info['address']}

## –§–ò–ù–ê–ù–°–û–í–´–ï –î–ê–ù–ù–´–ï (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã)
"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        for report in financial_data:
            prompt += f"""
### {report['year']} –≥–æ–¥:
- –í—ã—Ä—É—á–∫–∞: {self._format_currency(report['revenue'])}
- –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {self._format_currency(report['gross_profit'])}
- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {self._format_currency(report['operating_profit'])}
- –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {self._format_currency(report['net_profit'])}
- –ê–∫—Ç–∏–≤—ã: {self._format_currency(report['assets'])}
- –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {self._format_currency(report['equity'])}
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö
        if data["ownership_info"]:
            ownership = data["ownership_info"]
            prompt += f"""
## –°–¢–†–£–ö–¢–£–†–ê –°–û–ë–°–¢–í–ï–ù–ù–û–°–¢–ò
- –§–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü-—É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π: {ownership['individual_owners']}
- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü-—É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π: {ownership['legal_owners']}
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö
        if data["competitors_info"]:
            competitors = data["competitors_info"]
            prompt += f"""
## –ö–û–ù–ö–£–†–ï–ù–¢–´ (–ø–æ –û–ö–í–≠–î)
–ù–∞–π–¥–µ–Ω–æ {competitors['count']} –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –≤ –æ—Ç—Ä–∞—Å–ª–∏.
"""

        prompt += """

## –ó–ê–î–ê–ß–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:

–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞–∑–¥–µ–ª–∞–º:

### 1. üìä –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- –û—Ü–µ–Ω–∏ –¥–∏–Ω–∞–º–∏–∫—É –≤—ã—Ä—É—á–∫–∏, –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–∫—Ç–∏–≤–æ–≤ –∏ –∫–∞–ø–∏—Ç–∞–ª–∞
- –í—ã—è–≤–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
- –û—Ü–µ–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏

### 2. üéØ –ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å –∏ –æ—Ç—Ä–∞—Å–ª—å
- –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –û–ö–í–≠–î
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç—Ä–∞—Å–ª–∏
- –û—Ü–µ–Ω–∏ —Ä—ã–Ω–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
- –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ –≤ –¥–∞–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏

### 3. üí° SWOT-–∞–Ω–∞–ª–∏–∑
- **–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã** –∫–æ–º–ø–∞–Ω–∏–∏
- **–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã** –∏ —Ä–∏—Å–∫–∏
- **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏** –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
- **–£–≥—Ä–æ–∑—ã** –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥—ã

### 4. üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –û—Ü–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏—é –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
- –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ä–∏—Å–∫–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
- –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é

### 5. üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2-3 –≥–æ–¥–∞
- –ü—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
- –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- –ü—Ä–µ–¥–ª–æ–∂–∏ –ø—É—Ç–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

### 6. ‚ö†Ô∏è –†–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
- –í—ã—è–≤–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–∏
- –û—Ü–µ–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∏—Å–∫–∏
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –∏ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏
- –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–æ—Å–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–µ–ª–∞–π –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
"""

        return prompt

    def _format_currency(self, value: Optional[float]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if value is None or value == 0:
            return "0 ‚ÇΩ"

        if abs(value) >= 1_000_000_000:
            return f"{value / 1_000_000_000:.1f} –º–ª—Ä–¥ ‚ÇΩ"
        elif abs(value) >= 1_000_000:
            return f"{value / 1_000_000:.1f} –º–ª–Ω ‚ÇΩ"
        elif abs(value) >= 1_000:
            return f"{value / 1_000:.1f} —Ç—ã—Å ‚ÇΩ"
        else:
            return f"{value:.0f} ‚ÇΩ"